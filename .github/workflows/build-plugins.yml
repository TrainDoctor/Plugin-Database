name: Build Plugins

on:
  push:
    branches:
      - main
      - backend-building
    paths:
      - "plugins/**"
      - ".github/workflows/build-plugins.yml"
  pull_request:
    branches: ['*']
  workflow_dispatch:
    inputs:
      upload:
        type: boolean
        description: Re-upload the plugins to the store

jobs:
  build:
    name: Build updated plugins
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
      with:
        fetch-depth: 0
        submodules: "recursive"
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@fb1fe28aa9ff24afc553b37545437005a4cf2115
      with:
        sha: ${{ github.sha }}
        separator: ","
        files: |
          plugins/*
          .github/workflows/build-plugins.yml

    - name: Cache Docker images
      uses: satackey/action-docker-layer-caching@46d2c640b1d8ef50d185452ad6fb324e6bd1d052

    - name: Login to GitHub Container Registry
      run: |
        echo $GITHUB_TOKEN | docker login ghcr.io -u SteamDeckHomebrew --password-stdin
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Wait for other runs to complete
      uses: softprops/turnstyle@8db075d65b19bf94e6e8687b504db69938dc3c65
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull frontend builder image
      run: docker pull ghcr.io/steamdeckhomebrew/builder:latest

    - name: Log out of GitHub Container Registry
      run: |
        docker logout ghcr.io

    - name: Detect edited files/plugins
      id: list-files
      run: |
        pushd plugins
        files=()
        if [[ "${{ steps.changed-files.outputs.all_changed_files }}" == *".github/workflows/build-plugins.yml"* ]]; 
        then
          echo "Rebuilding all plugins due to workflow edit"
          for file in ./plugins/*; do
            files+=($(cut -d/ -f3 <<< $file))
          done
        else
          rest="${{ steps.changed-files.outputs.all_changed_files }}"
          while [ -n "$rest" ] ; do
            str=${rest%%,*}
            [ "$rest" = "${rest/,/}" ] && rest= || rest=${rest#*,}
            files+=($(cut -d/ -f2 <<< $str))
          done <<< "$files"
          printf "%s\n" "${files[@]}" | sort -u
        fi
        popd
        echo ::set-output name=edited_files::${files[@]}
    
    - name: Build plugin backends
      run: |
        files="${{ steps.list-files.outputs.edited_files }}"
        pushd plugins
        echo "Plugins: $(dirs -v)"
        for plugin in $(printf "%s\n" "${files[@]}" | sort -u); do
          pushd $plugin
          echo "Plugin: $plugin"
          echo Built $plugin frontend
          # ls -lla /tmp/output/$plugin
          popd
        done
        popd

    - name: Build plugin frontends
      run: |
        files="${{ steps.list-files.outputs.edited_files }}"
        pushd plugins
        for plugin in $(printf "%s\n" "${files[@]}" | sort -u); do
          pushd $plugin
          docker run --rm -i -v $PWD:/plugin -v /tmp/output/$plugin:/out ghcr.io/steamdeckhomebrew/builder:latest
          echo Built $plugin frontend
          ls -lla /tmp/output/$plugin
          popd
        done
        popd
        
    - name: Zip Plugins
      run: |
        shopt -s dotglob
        mkdir -p /tmp/zips/
        pushd /tmp/output
        for abs_plugin in /tmp/output/*; do
          plugin=$(basename $abs_plugin)
          zipname=/tmp/zips/$(basename ${plugin}).zip

          # Names of the optional files (the license can either be called license or license.md, not both)
          # (head is there to take the first file, because we're assuming there's only a single license file)
          license="$(find $plugin -maxdepth 1 -type f \( -iname "license" -o -iname "license.md" \) -printf '%P\n' | head -n 1)"
          readme="$(find $plugin -maxdepth 1 -type f -iname 'readme.md' -printf '%P\n')"
          haspython="$(find $plugin -maxdepth 1 -type f -name '*.py' -printf '%P\n')"
          # Add required plugin files (and directory) to zip file
          echo "$plugin/dist $plugin/plugin.json $plugin/package.json"
          zip -r $zipname "$plugin/dist" "$plugin/plugin.json" "$plugin/package.json"
          # Check if plugin has a defaults folder, if so, add "default" contents to root dir
          hasdefaults="$(find $plugin -maxdepth 1 -type d -name 'defaults' -printf '%P\n')"
          if [ ! -z "$hasdefaults" ]; then
            for item in "$plugin/defaults/*"; do
              [ -d $item ] && echo "$item is a folder"
              [ -f $item ] && echo "$item is a file"
              zip -r $item "$plugin/$item"
            done
          fi
          # Check if other files exist, and if they do, add them
          echo "$plugin/$license $plugin/$readme $plugin/$mainpy"
          if [ ! -z "$license" ]; then
            zip -r $zipname "$plugin/$license"
          fi
          if [ ! -z "$readme" ]; then
            zip -r $zipname "$plugin/$readme"
          fi
          if [ ! -z "$haspython" ]; then
            find $plugin -maxdepth 1 -type f -name '*.py' -exec zip -r $zipname {} \;
          fi
        done
        popd

    - name: Upload Artifacts to Github
      uses: actions/upload-artifact@v3
      with:
        name: plugins
        path: /tmp/zips/*

    - name: Upload plugins
      if: ${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.upload) }}
      run: |
        shopt -s dotglob
        for plugin in /tmp/output/*; do
          zipname=/tmp/zips/$(basename ${plugin}).zip
          pushd $plugin
          curl -X POST -H "Authorization: ${PLUGIN_STORE_KEY}" -F "name=$(jq -r '.name' ./plugin.json)" -F "author=$(jq -r '.author' ./plugin.json)" -F "description=$(jq -r '.publish.description' ./plugin.json)" -F "tags=$(jq -r '.publish.tags|join(",")' ./plugin.json)" -F "version_name=$(jq -r '.version' ./package.json)" -F "image=$(jq -r '.publish.image' ./plugin.json)" -F "file=@${zipname}" https://beta.deckbrew.xyz/__submit
          popd
        done
      env:
        PLUGIN_STORE_KEY: ${{ secrets.PLUGIN_STORE_KEY }}
