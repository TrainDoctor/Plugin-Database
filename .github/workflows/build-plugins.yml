name: Build Plugins

on:
  push:
    branches:
      - main
      - backend-builder
      - use-cli
    paths:
      - "plugins/**"
      - ".github/workflows/build-plugins.yml"
  pull_request_target:
    branches: ['*']
  workflow_dispatch:
    inputs:
      upload_all:
        type: boolean
        description: Re-upload the plugins to the store

jobs:
  build:
    name: Build updated plugins
    runs-on: ubuntu-latest
    environment:
      name: ${{ (github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.upload))) && 'env' || 'testing_env' }}    

    steps:
    - name: Checkout
      if: ${{ !env.ACT }}
      uses: actions/checkout@8230315d06ad95c617244d2f265d237a1682d445
      with:
        ref: ${{ github.event.pull_request.head.sha || github.sha }}
        fetch-depth: 0
        submodules: "recursive"
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Get changed files
      id: changed-files
      env:
        isPr: ${{ github.event_name == 'pull_request_target' }}
        uploadAll: ${{ inputs.upload_all }}
      run: |
        # Returns a list of paths relative to the git repository of the files that changed
        # In pull requests, it diffs files between the last commit in the pull request and main
        # In push events, it diffs between the current commit and the previous

        # Paths to be included in the diff
        PATHS=(plugins)

        # Find refs to be diffed
        if [[ $isPr == "true" ]]; then
          # Fetch all remotes so we can properly diff
          git fetch --no-tags --prune --depth=1 origin +refs/heads/*:refs/remotes/origin/*

          # Diff with the ref of the target branch
          REF=origin/${{ github.base_ref }}
        else
          # Diff with previous commit
          REF=HEAD^
        fi

        ALL_PLUGINS=$(find ${PATHS[@]} -mindepth 1 -maxdepth 1 | xargs -r -L1 basename)
        CHANGED_PLUGINS=$(git diff ${REF[@]} --name-only --submodule=diff -- ${PATHS[@]} | xargs -r -L1 basename)

        PLUGINS_PENDING_BUILD=$CHANGED_PLUGINS
        PLUGINS_PENDING_UPLOAD=$CHANGED_PLUGINS

        WORKFLOW_CHANGED=$(git diff ${REF[@]} --name-only -- .github/workflows/build-plugins.yml)
        if [[ $WORKFLOW_CHANGED ]]; then
          echo "::notice::Workflow was changed. Setting all plugins as pending build."
          PLUGINS_PENDING_BUILD=$ALL_PLUGINS
        fi

        if [[ $uploadAll == "true" ]]; then

          echo "::notice::Workflow run set to upload_all. Setting all plugins as pending build and upload."
          PLUGINS_PENDING_BUILD=$ALL_PLUGINS
          PLUGINS_PENDING_UPLOAD=$ALL_PLUGINS
        fi

        echo "all_changed_plugins<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGED_PLUGINS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        echo "plugins_pending_build<<EOF" >> $GITHUB_OUTPUT
        echo "$PLUGINS_PENDING_BUILD" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        echo "plugins_pending_upload<<EOF" >> $GITHUB_OUTPUT
        echo "$PLUGINS_PENDING_UPLOAD" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Wait for other runs to complete
      if: ${{ !env.ACT }}
      uses: pau1ocampos/turnstyle@17e7c2e349edeb2fc92d15e99f389c6011e02956
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Download Decky CLI
      run: |
        mkdir /tmp/decky-cli
        curl -L -o /tmp/decky-cli/decky "https://github.com/SteamDeckHomebrew/cli/releases/download/0.0.1-alpha.7/decky"
        chmod +x /tmp/decky-cli/decky

        echo "/tmp/decky-cli" >> $GITHUB_PATH

    - name: Build plugins
      run: |
        PLUGINS=(${{ steps.changed-files.outputs.plugins_pending_build }})
        for plugin in "${PLUGINS[@]}"; do
          decky plugin build -b -o /tmp/output -s directory plugins/$plugin
        done

    - name: Upload Artifacts to Github
      if: ${{ !env.ACT }}
      uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8
      with:
        name: plugins
        path: /tmp/output/*.zip

    - name: Upload plugins to store
      if: ${{ !env.ACT }}
      id: upload-plugins
      run: |
        PLUGINS=(${{ steps.changed-files.outputs.plugins_pending_upload }})
        shopt -s dotglob
        for plugin in "${PLUGINS[@]}"; do
          artifact=/tmp/output/$plugin.zip

          query_plugin_json () {
            local result=$(unzip -p $artifact $plugin/plugin.json | jq -r "$1")
            echo $result
          }

          if [[ -z $artifact ]]; then
            echo "::error::Could not find artifact for $plugin in $artifact"
            continue
          fi

          shouldUpload=$(query_plugin_json '.publish | any(.tags[] == "dnu"; .) | not')

          if [[ "shouldUpload" == "false" ]]; then
            echo "::warning::Plugin $plugin is marked as 'do not upload'. Consider removing the 'dnu' tag if this is an accident."
            continue
          fi

          PLUGIN_NAME=$(query_plugin_json '.name')
          PLUGIN_AUTHOR=$(query_plugin_json '.author')
          PLUGIN_DESCRIPTION=$(query_plugin_json '.publish.description')
          PLUGIN_VERSION=$(query_plugin_json '.version')
          PLUGIN_IMAGE=$(query_plugin_json '.publish.image')

          echo "::notice::Uploading plugin $PLUGIN_NAME v$PLUGIN_VERSION (by $PLUGIN_AUTHOR)"

          curl -X POST \
               -H "Authorization: ${SUBMIT_AUTH_KEY}" \
               -F "name=$PLUGIN_NAME" \
               -F "author=$PLUGIN_AUTHOR" \
               -F "description=$PLUGIN_DESCRIPTION" \
               -F "tags=$PLGUIN_TAGS" \
               -F "version_name=$PLUGIN_VERSION" \
               -F "image=$PLUGIN_IMAGE" \
               -F "file=@${artifact}" \
               ${STORE_URL}/__submit
        done
      env:
        SUBMIT_AUTH_KEY: ${{ secrets.SUBMIT_AUTH_KEY }}
        STORE_URL: ${{ secrets.STORE_URL }}
